#+title: Lab-book do Henrique
#+author: Henrique Silva
#+email: hcpsilva@inf.ufrgs.br
#+infojs_opt:
#+property: session *R*
#+property: cache yes
#+property: results graphics
#+property: exports both
#+property: tangle yes

Primeiramente, lab-book em org sim (jeito certo) e pau no cu do txt.

* Sumário                                                             :TOC_3:
- [[#diário][Diário]]
  - [[#2019-09-29][2019-09-29]]
  - [[#2019-10-06][2019-10-06]]
  - [[#2019-10-11][2019-10-11]]
- [[#otimizações][Otimizações]]
  - [[#alocação-contígua-da-matriz-em-memória][Alocação contígua da matriz em memória]]
  - [[#transposição-da-matriz][Transposição da matriz]]
  - [[#simd-no-loop-de-multiplicação][SIMD no loop de multiplicação]]
- [[#experimentos][Experimentos]]
  - [[#design][Design]]
  - [[#script][Script]]
  - [[#post-processing][Post-processing]]
  - [[#visualização][Visualização]]
    - [[#preliminar][Preliminar]]
    - [[#final][Final]]

* Diário

Anotações que não merecem tópicos só pra elas.

** 2019-09-29

Bom, algumas coisas que eu pensei agora depois de acordar:

- Fazer design fatorial completo dos experimentos (não são muitas variáveis,
  deve ser tranquilo)
- Achar otimizações de multiplicação de matrizes na internet deve ser tipo muito
  fácil então não vamos contar que nosso trab "vai ser muito mais do que eles
  peçam" por definição (i.e. qualquer um que sabe usar google vai acabar dando
  de cara com o particionamento e com openmp)

Acho que o mais chato vai ser multiplexar as otimizações que implementaremos.
Tipo, como desligar e ligar só as otimizações que a gente quer em tempo de
compilação? =#if=? Usar defines e =#ifndef= me parece que pode ficar bem chato
bem rapido.

** 2019-10-06

Então, hoje é o dia que eu espero testar o memalign e o simd do OpemMP de
novo.

Okay, eu acho que não dá pra vetorizar sem transpor a matriz. Como fazer o load
se os dados estão separados por um certo stride? Além disso, precisamos dizer
pro compilador que os ponteiros não são aliased pra ele confiar que a
vetorização é possível (keyword restrict).

O =#pragma omp simd= só passa a ter efeito quando o nível de otimização é -O1!!!
Resposta interessante no stack-overflow: [[https://stackoverflow.com/questions/32000917/c-loop-optimization-help-for-final-assignment-with-compiler-optimization-disabl/32001196#32001196][Why is -O0 bad]]

Vou ignorar o esquema da vetorização e focar na transposição e alinhamento.

Sem diferença usando ou não alinhamento de memória.

** 2019-10-11

Pretendo hoje fazer umas visualizações preliminares dos dados obtidos dos
experimentos...

* Otimizações

Implementamos as seguintes otimizações sobre o código original:

** Alocação contígua da matriz em memória                            :OTM_1:

Not sure como que isso conta como uma otimização. Parece mais um side-effect
desejável das outras otimizações, mas oh well.

Enfim, alocar a matriz continuamente em memória para evitar misses.

** Transposição da matriz                                            :OTM_2:

Acessar uma coluna como se fosse uma linha (porque em memória é uma linha) ajuda
muito.

** SIMD no loop de multiplicação                                     :OTM_3:

So far parece a mais simples. Incluir OpenMP e usar a diretiva =simd=.

* Experimentos

Então, parece ser straightfoward enough mas é que pra fazer acontecer depende
muito de como a gente vai fazer pra compilar diferentes versões do nosso
código.

Quer dizer, sempre da pra fazer um brute force do problema e escrever um
executavel pra cada versão, right? (muito feio tho)

Okay, sobre experimentos:

#+begin_src R :session :results none
library(DoE.base)
library(tidyverse)
options(crayon.enabled=FALSE)
#+end_src

** Design

Seed randômica:

#+begin_src R :session :results value :exports results
floor(runif(1,1,99999))
#+end_src

#+RESULTS:
: 56753

Design:

#+begin_src R :session :results none
otim_1 = c("y", "n")
otim_2 = c("y", "n")
otim_3 = c("y", "n")
comp = c("-O0", "-O1", "-O2", "-O3")

fac.design(
    nfactors=4,
    replications=30,
    repeat.only=FALSE,
    blocks=1,
    randomize=TRUE,
    seed=56753,
    factor.names=list(
      otimizacao_1=otim_1,
      otimizacao_2=otim_2,
      otimizacao_3=otim_3,
      compiler=comp)) %>%
  as_tibble %>%
  transmute(id = as.numeric(Blocks), otimizacao_1, otimizacao_2, otimizacao_3, compiler) %>%
  write_delim("../experiments/runs.plan", delim=" ", col_names=FALSE)

# the space delimited file is to help with the posterior parsing in the shell
# script
#+end_src

** Script

Para a execução...

O original que usamos para a entrega está no commit marcado como release. Como
eu queria testar uma coisinha, vou fazer uma nova versão aqui (que pretendo
deixar mais bonitinho):

#+begin_src bash :shebang "#!/bin/bash" :tangle ../experiments/exp.slurm
#SBATCH --time=72:00:00
#SBATCH --chdir=.
#SBATCH --partition=draco
#SBATCH --nodes=1
#SBATCH --output=%x_%j.out
#SBATCH --error=%x_%j.err
#BATCH --mail-type=END,FAIL
#BATCH --mail-user=hcpsilva@inf.ufrgs.br

# machine:
MACHINE=${SLURMD_HOSTNAME}_${SLURM_CPUS_ON_NODE}

# parameters:
# the experiment ID, defined in the lab-book
EXP_ID=$1
# the experiment directory
EXP_DIR=$2
# hardware counters
COUNTER_LIST="cycles L1-dcache-load-misses instructions l1d.replacement"

# experiment name (which is the ID and the machine and its core count)
EXP_NAME=${EXP_ID}_${MACHINE}

# go to the scratch dir
cd $SCRATCH

# and clean everything
rm -rf *

# prepare our directory
mkdir $EXP_NAME
pushd $EXP_NAME

# copy the code folder
cp -r $(dirname $EXP_DIR) code
mkdir results
output_csv=$(pwd)/results/$EXP_NAME.csv
pushd code

# init the csv results file
echo "rep_id,time,${COUNTER_LIST// /,},optm_1,optm_2,optm_3,comp" > $output_csv

# execute the experiment
while read -r id otm1 otm2 otm3 comp; do
    echo "-> Parameters set to: $id $otm1 $otm2 $otm3 $comp"
    echo

    # alocacao contigua
    OPT1=$([ $otm1 = "y" ] && echo "-DOTM_1")
    # matriz b transposta
    OPT2=$([ $otm2 = "y" ] && echo "-DOTM_2")
    # simd
    OPT3=$([ $otm3 = "y" ] && echo "-DOTM_3 -fopenmp -fopenmp-simd")

    # compilação
    make redo USED_OPT="$OPT1 $OPT2 $OPT3" COMP_OPT="$comp"

    # init the line with the exec id
    csv_line=${id}

    # get the time obs
    time_obs=$(./build/mult 1024 1024)

    # add the time
    csv_line+=,${time_obs}

    # stress the memory to prevent cache influence between runs
    stress-ng --vm 3 --vm-bytes 75% -t 5s &> /dev/null

    for counter in $COUNTER_LIST; do
        perf stat -o perftmp~ -e $counter ./build/mult 1024 1024

        # get the observation
        perf_obs=$(grep -w $counter perftmp~ | awk '{print $1}' | tr -d ,)

        # add the metric to the line
        csv_line+=,${perf_obs}

        # stress the memory to prevent cache influence between runs
        stress-ng --vm 3 --vm-bytes 75% -t 5s &> /dev/null
    done

    # add run info
    csv_line+=,${otm1},${otm2},${otm3},${comp//-}

    # commit the line
    echo $csv_line >> $output_csv

    echo
done < $EXP_DIR/runs.plan

popd

# pack everything and send to the exp dir
tar czf $EXP_DIR/$EXP_NAME.tar.gz *

popd
rm -rf $SCRATCH/*
#+end_src

** Post-processing

Agora os dados estão em .csv direto!

#+begin_src bash :results none :async
REPO_DIR=$(dirname $(pwd))
RAW_OUTPUTS=t1_draco_32.tar.gz

pushd $REPO_DIR/experiments/data_2

RAW_DIR=raw_data

mkdir $RAW_DIR
tar -C $RAW_DIR -xzf $RAW_OUTPUTS

mv $RAW_DIR/results/*.csv .
#+end_src

Done!

Coloquei tudo na pasta =data_1/= por motivos desses dados serem relativos a
primeira execução do experimento. Algo me diz que vamos executar ele mais vezes
até segunda...

** Visualização

Agora sobre a visualização dos dados... vamos começar com uma preliminar e
depois vamos pra uma de verdadezinha...

*** Preliminar

Bom, começemos com o simples...

Tentando o impacto de somente a otimização 1 dado o nível de otimização do
compilador:

#+begin_src R :tangle yes :session :results output graphics :file images/test_1.png
df <- read_csv("../experiments/data_1/exp_data.csv")

df %>%
  select(time, optm_1, optm_2, optm_3, comp) %>%
  filter(optm_2 == "n", optm_3 == "n") %>%
  select(time, optm_1, comp) %>%
  ggplot(aes(x = optm_1, y = time)) +
  stat_boxplot(geom = 'errorbar', width = 0.2) +
  geom_boxplot(width = 0.2, fill = "lightgrey") +
  facet_grid(cols = vars(comp)) +
  theme_bw() +
  theme(text = element_text(family = "Palatino", size = 16))
#+end_src

#+RESULTS:
[[file:images/test_1.png]]

E agora repetindo o mesmo para a otimização 2...

#+begin_src R :tangle yes :session :results output graphics :file images/test_2.png
df <- read_csv("../experiments/data_1/exp_data.csv")

df %>%
  select(time, optm_1, optm_2, optm_3, comp) %>%
  filter(optm_1 == "n", optm_3 == "n") %>%
  select(time, optm_2, comp) %>%
  ggplot(aes(x = optm_2, y = time)) +
  stat_boxplot(geom = 'errorbar', width = 0.2) +
  geom_boxplot(width = 0.2, fill = "lightgrey") +
  facet_grid(cols = vars(comp)) +
  theme_bw() +
  theme(text = element_text(family = "Palatino", size = 16))
#+end_src

#+RESULTS:
[[file:images/test_2.png]]

E a otimização 3...

#+begin_src R :tangle yes :session :results output graphics :file images/test_3.png
df <- read_csv("../experiments/data_1/exp_data.csv")

df %>%
  select(time, optm_1, optm_2, optm_3, comp) %>%
  filter(optm_1 == "n", optm_2 == "n") %>%
  select(time, optm_3, comp) %>%
  ggplot(aes(x = optm_3, y = time)) +
  stat_boxplot(geom = 'errorbar', width = 0.2) +
  geom_boxplot(width = 0.2, fill = "lightgrey") +
  facet_grid(cols = vars(comp)) +
  theme_bw() +
  theme(text = element_text(family = "Palatino", size = 16))
#+end_src

#+RESULTS:
[[file:images/test_3.png]]

Agora vou tentar ver a diferença de tempo das combinações das otimizações 1, 2 e
3:

#+begin_src R :tangle yes :session :results output graphics :file images/test_4.png
df <- read_csv("../experiments/data_1/exp_data.csv")

df %>%
  select(time, optm_1, optm_2, optm_3, comp) %>%
  filter(optm_1 == "y", optm_2 == "y", optm_3 == "n") %>%
  select(time, comp) %>%
  ggplot(aes(x = comp, y = time)) +
  stat_boxplot(geom = 'errorbar', width = 0.2) +
  geom_boxplot(width = 0.2, fill = "lightgrey") +
  theme_bw() +
  theme(text = element_text(family = "Palatino", size = 16))
#+end_src

#+RESULTS:
[[file:images/test_4.png]]

*** Final

Começando por selecionar o dataset que queremos usar:

#+begin_src R :tangle yes :session :results none
df <- read_csv("../experiments/data_2/exp_data.csv")
#+end_src

Agora, aos gráficos:

**** Diferença de tempo entre ligar as otimizações individualmente

Primeira otimização primeiro

#+begin_src R :tangle yes :session :results output graphics :file images/only_otm_1.png :width 600
df %>%
  select(time, optm_1, optm_2, optm_3, comp) %>%
  filter(optm_2 == "n", optm_3 == "n") %>%
  select(time, optm_1, comp) %>%
  ggplot(aes(x = optm_1, y = time)) +
  stat_boxplot(geom = 'errorbar', width = 0.2) +
  geom_boxplot(width = 0.2, fill = "lightgrey") +
  stat_summary(fun.y = mean, geom = "point", size = 2, color = "red") +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 6)) +
  facet_grid(cols = vars(comp)) +
  labs(x = "Estado da primeira otimização", y = "Tempo (segundos)", title = "Tempo conforme estado da 1ª otimização") +
  scale_x_discrete(labels = c("y" = "Ligada", "n" = "Desligada")) +
  theme_bw() +
  theme(text = element_text(family = "Palatino", size = 16),
        axis.text.x = element_text(angle = 45, vjust = 0.6))
#+end_src

#+RESULTS:
[[file:images/only_otm_1.png]]

E agora a segunda otimização

#+begin_src R :tangle yes :session :results output graphics :file images/only_otm_2.png :width 600
df %>%
  select(time, optm_1, optm_2, optm_3, comp) %>%
  filter(optm_1 == "n", optm_3 == "n") %>%
  select(time, optm_2, comp) %>%
  ggplot(aes(x = optm_2, y = time)) +
  stat_boxplot(geom = 'errorbar', width = 0.2) +
  geom_boxplot(width = 0.2, fill = "lightgrey") +
  stat_summary(fun.y = mean, geom = "point", size = 2, color = "red") +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 9)) +
  facet_grid(cols = vars(comp)) +
  labs(x = "Estado da segunda otimização", y = "Tempo (segundos)", title = "Tempo conforme estado da 2ª otimização") +
  scale_x_discrete(labels = c("y" = "Ligada", "n" = "Desligada")) +
  theme_bw() +
  theme(text = element_text(family = "Palatino", size = 16),
        axis.text.x = element_text(angle = 45, vjust = 0.6))
#+end_src

#+RESULTS:
[[file:images/only_otm_2.png]]

E finalmente a terceira

#+begin_src R :tangle yes :session :results output graphics :file images/only_otm_3.png :width 600
df %>%
  select(time, optm_1, optm_2, optm_3, comp) %>%
  filter(optm_1 == "n", optm_2 == "n") %>%
  select(time, optm_3, comp) %>%
  ggplot(aes(x = optm_3, y = time)) +
  stat_boxplot(geom = 'errorbar', width = 0.2) +
  geom_boxplot(width = 0.2, fill = "lightgrey") +
  stat_summary(fun.y = mean, geom = "point", size = 2, color = "red") +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 8)) +
  facet_grid(cols = vars(comp)) +
  labs(x = "Estado da terceira otimização", y = "Tempo (segundos)", title = "Tempo conforme estado da 3ª otimização") +
  scale_x_discrete(labels = c("y" = "Ligada", "n" = "Desligada")) +
  theme_bw() +
  theme(text = element_text(family = "Palatino", size = 16),
        axis.text.x = element_text(angle = 45, vjust = 0.6))
#+end_src

#+RESULTS:
[[file:images/only_otm_3.png]]

**** Visualizando as diferenças em otimizações dos compiladores

Começando com todas otimizações desligadas

#+begin_src R :tangle yes :session :results output graphics :file images/comp_otm_off.png :width 550
df %>%
  select(time, optm_1, optm_2, optm_3, comp) %>%
  filter(optm_1 == "n", optm_2 == "n", optm_3 == "n") %>%
  select(time, comp) %>%
  ggplot(aes(x = comp, y = time)) +
  stat_boxplot(geom = 'errorbar', width = 0.2) +
  geom_boxplot(width = 0.2, fill = "lightgrey") +
  stat_summary(fun.y = mean, geom = "point", size = 2, color = "red") +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 8)) +
  labs(x = "Otimização de compilação utilizada",
       y = "Tempo (segundos)",
       title = "Tempo conforme otimização de compilador aplicada",
       subtitle = "com todas otimizações de código desligadas") +
  theme_bw() +
  theme(text = element_text(family = "Palatino", size = 16),
        axis.text.x = element_text(angle = 45, vjust = 0.6))
#+end_src

#+RESULTS:
[[file:images/comp_otm_off.png]]

e agora com todas as otimizações ligadas

#+begin_src R :tangle yes :session :results output graphics :file images/comp_otm_on.png :width 550
df %>%
  select(time, optm_1, optm_2, optm_3, comp) %>%
  filter(optm_1 == "y", optm_2 == "y", optm_3 == "y") %>%
  select(time, comp) %>%
  ggplot(aes(x = comp, y = time)) +
  stat_boxplot(geom = 'errorbar', width = 0.2) +
  geom_boxplot(width = 0.2, fill = "lightgrey") +
  stat_summary(fun.y = mean, geom = "point", size = 2, color = "red") +
  scale_y_continuous(breaks = scales::pretty_breaks(c(2, NA), n = 8),
                     limits = c(0, NA)) +
  labs(x = "Otimização de compilação utilizada",
       y = "Tempo (segundos)",
       title = "Tempo conforme otimização de compilador aplicada",
       subtitle = "com todas otimizações de código ligadas") +
  theme_bw() +
  theme(text = element_text(family = "Palatino", size = 16),
        axis.text.x = element_text(angle = 45, vjust = 0.6))
#+end_src

#+RESULTS:
[[file:images/comp_otm_on.png]]

**** Vendo o impacto nos ciclos de execução

Vamos dar uma olhada geral nas otimizações 2 e 3

#+begin_src R :tangle yes :session :results output graphics :file images/cycles_2_and_3.png :width 600 :height 550
df %>%
  select(metric, metric_value, optm_1, optm_2, optm_3, comp) %>%
  filter(optm_1 == "n", metric == "cycles") %>%
  select(metric_value, optm_2, optm_3, comp) %>%
  ggplot(aes(x = comp, y = metric_value)) +
  stat_boxplot(geom = 'errorbar', width = 0.2) +
  geom_boxplot(width = 0.2, fill = "lightgrey") +
  stat_summary(fun.y = mean, geom = "point", size = 2, color = "red") +
  facet_grid(optm_2 ~ optm_3, labeller = labeller(optm_2 = c(y = "Otimização 2: Ligada", n = "Otimização 2: Desligada"),
                                                  optm_3 = c(y = "Otimização 3: Ligada", n = "Otimização 3: Desligada"))) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 8)) +
  labs(x = "Otimização de compilação aplicada",
       y = "Número de ciclos",
       title = "Número de ciclos observados",
       subtitle = "conforme uso das otimizações 2 e 3") +
  theme_bw() +
  theme(text = element_text(family = "Palatino", size = 16),
        axis.text.x = element_text(angle = 45, vjust = 0.6))
#+end_src

#+RESULTS:
[[file:images/cycles_2_and_3.png]]

**** Impacto nos misses à L1 conforme uso das otimizações

Focando nas otimizações 1 e 2 pois elas afetam mais a cache:

#+begin_src R :tangle yes :session :results output graphics :file images/misses_1_and_2n.png :width 600 :height 550
df %>%
  select(metric, metric_value, optm_1, optm_2, optm_3, comp) %>%
  filter(optm_3 == "n", optm_2 == "n", metric == "L1-dcache-load-misses") %>%
  select(metric_value, optm_1, optm_2, comp) %>%
  ggplot(aes(x = comp, y = metric_value)) +
  stat_boxplot(geom = 'errorbar', width = 0.2) +
  geom_boxplot(width = 0.2, fill = "lightgrey") +
  stat_summary(fun.y = mean, geom = "point", size = 2, color = "red") +
  facet_grid(optm_2 ~ optm_1, labeller = labeller(optm_1 = c(y = "Otimização 1: Ligada", n = "Otimização 1: Desligada"),
                                                  optm_2 = c(y = "Otimização 2: Ligada", n = "Otimização 2: Desligada"))) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 7)) +
  labs(x = "Otimização de compilação aplicada",
       y = "Número de misses à L1 de dados",
       title = "Número de misses observados no 1º nível de cache de dados",
       subtitle = "conforme uso das otimizações 1 e 2") +
  theme_bw() +
  theme(text = element_text(family = "Palatino", size = 16),
        axis.text.x = element_text(angle = 45, vjust = 0.6))
#+end_src

#+RESULTS:
[[file:images/misses_1_and_2n.png]]

#+begin_src R :tangle yes :session :results output graphics :file images/misses_1_and_2y.png :width 600 :height 550
df %>%
  select(metric, metric_value, optm_1, optm_2, optm_3, comp) %>%
  filter(optm_3 == "n", optm_2 == "y", metric == "L1-dcache-load-misses") %>%
  select(metric_value, optm_1, optm_2, comp) %>%
  ggplot(aes(x = comp, y = metric_value)) +
  stat_boxplot(geom = 'errorbar', width = 0.2) +
  geom_boxplot(width = 0.2, fill = "lightgrey") +
  stat_summary(fun.y = mean, geom = "point", size = 2, color = "red") +
  facet_grid(optm_2 ~ optm_1, labeller = labeller(optm_1 = c(y = "Otimização 1: Ligada", n = "Otimização 1: Desligada"),
                                                  optm_2 = c(y = "Otimização 2: Ligada", n = "Otimização 2: Desligada"))) +
  scale_y_continuous(labels = scales::scientific,
                     breaks = scales::pretty_breaks(n = 7)) +
  labs(x = "Otimização de compilação aplicada",
       y = "Número de misses à L1 de dados",
       title = "Número de misses observados no 1º nível de cache de dados",
       subtitle = "conforme uso das otimizações 1 e 2") +
  theme_bw() +
  theme(text = element_text(family = "Palatino", size = 16),
        axis.text.x = element_text(angle = 45, vjust = 0.6))
#+end_src

#+RESULTS:
[[file:images/misses_1_and_2y.png]]

**** Sobre o número de instruções executadas

Vamos verificar a diferença entre nenhuma otimização de código ligada e todas
ligadas:

#+begin_src R :tangle yes :session :results output graphics :file images/insts_all_or_none.png :width 600 :height 550
df %>%
  select(metric, metric_value, optm_1, optm_2, optm_3, comp) %>%
  filter(optm_1 == optm_2, optm_2 == optm_3, metric == "instructions") %>%
  select(metric_value, optm_1, optm_2, optm_3, comp) %>%
  ggplot(aes(x = comp, y = metric_value)) +
  stat_boxplot(geom = 'errorbar', width = 0.2) +
  geom_boxplot(width = 0.2, fill = "lightgrey") +
  stat_summary(fun.y = mean, geom = "point", size = 2, color = "red") +
  facet_grid(. ~ optm_1,
             labeller = labeller(optm_1 = c(y = "Todas otimizações ligadas",
                                            n = "Todas otimizações desligadas"))) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 7)) +
  labs(x = "Otimização de compilação aplicada",
       y = "Número de instruções",
       title = "Número de instruções executadas",
       subtitle = "conforme uso das otimizações 1, 2 e 3") +
  theme_bw() +
  theme(text = element_text(family = "Palatino", size = 16),
        axis.text.x = element_text(angle = 45, vjust = 0.6))
#+end_src

#+RESULTS:
[[file:images/insts_all_or_none.png]]

**** Analizando os replacements na L1D

Olhando somente para as otimizações 1 e 2, novamente:

#+begin_src R :tangle yes :session :results output graphics :file images/rep_1_and_2n.png :width 600 :height 550
df %>%
  select(metric, metric_value, optm_1, optm_2, optm_3, comp) %>%
  filter(optm_3 == "n", optm_2 == "n", metric == "l1d.replacement") %>%
  select(metric_value, optm_1, optm_2, comp) %>%
  ggplot(aes(x = comp, y = metric_value)) +
  stat_boxplot(geom = 'errorbar', width = 0.2) +
  geom_boxplot(width = 0.2, fill = "lightgrey") +
  stat_summary(fun.y = mean, geom = "point", size = 2, color = "red") +
  facet_grid(optm_2 ~ optm_1, labeller = labeller(optm_1 = c(y = "Otimização 1: Ligada", n = "Otimização 1: Desligada"),
                                                  optm_2 = c(y = "Otimização 2: Ligada", n = "Otimização 2: Desligada"))) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 7)) +
  labs(x = "Otimização de compilação aplicada",
       y = "Número de replacements na L1 de dados",
       title = "Número de replacements observados",
       subtitle = "conforme uso das otimizações 1 e 2") +
  theme_bw() +
  theme(text = element_text(family = "Palatino", size = 16),
        axis.text.x = element_text(angle = 45, vjust = 0.6))
#+end_src

#+RESULTS:
[[file:images/rep_1_and_2n.png]]

#+begin_src R :tangle yes :session :results output graphics :file images/rep_1_and_2y.png :width 600 :height 550
df %>%
  select(metric, metric_value, optm_1, optm_2, optm_3, comp) %>%
  filter(optm_3 == "n", optm_2 == "y", metric == "l1d.replacement") %>%
  select(metric_value, optm_1, optm_2, comp) %>%
  ggplot(aes(x = comp, y = metric_value)) +
  stat_boxplot(geom = 'errorbar', width = 0.2) +
  geom_boxplot(width = 0.2, fill = "lightgrey") +
  stat_summary(fun.y = mean, geom = "point", size = 2, color = "red") +
  facet_grid(optm_2 ~ optm_1, labeller = labeller(optm_1 = c(y = "Otimização 1: Ligada", n = "Otimização 1: Desligada"),
                                                  optm_2 = c(y = "Otimização 2: Ligada", n = "Otimização 2: Desligada"))) +
  scale_y_continuous(labels = scales::scientific,
                     breaks = scales::pretty_breaks(n = 7)) +
  labs(x = "Otimização de compilação aplicada",
       y = "Número de replacements na L1 de dados",
       title = "Número de replacements observados",
       subtitle = "conforme uso das otimizações 1 e 2") +
  theme_bw() +
  theme(text = element_text(family = "Palatino", size = 16),
        axis.text.x = element_text(angle = 45, vjust = 0.6))
#+end_src

#+RESULTS:
[[file:images/rep_1_and_2y.png]]
