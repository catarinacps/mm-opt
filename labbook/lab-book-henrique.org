#+title: Lab-book do Henrique
#+author: Henrique Silva
#+email: hcpsilva@inf.ufrgs.br
#+infojs_opt:
#+property: session *R*
#+property: cache yes
#+property: results graphics
#+property: exports both
#+property: tangle yes

Primeiramente, lab-book em org sim (jeito certo) e pau no cu do txt.

* Sumário                                                             :TOC_3:
- [[#diário][Diário]]
  - [[#2019-09-29][2019-09-29]]
- [[#otimizações][Otimizações]]
  - [[#particionamento-da-matriz][Particionamento da matriz]]
  - [[#paralelização-e-simd-no-loop-de-multiplicação][Paralelização e SIMD no loop de multiplicação]]
  - [[#alocação-contígua-da-matriz-em-memória][Alocação contígua da matriz em memória]]
- [[#experimentos][Experimentos]]

* Diário

Anotações que não merecem tópicos só pra elas.

** 2019-09-29

Bom, algumas coisas que eu pensei agora depois de acordar:

- Fazer design fatorial completo dos experimentos (não são muitas variáveis,
  deve ser tranquilo)
- Achar otimizações de multiplicação de matrizes na internet deve ser tipo muito
  fácil então não vamos contar que nosso trab "vai ser muito mais do que eles
  peçam" por definição (i.e. qualquer um que sabe usar google vai acabar dando
  de cara com o particionamento e com openmp)

Acho que o mais chato vai ser multiplexar as otimizações que implementaremos.
Tipo, como desligar e ligar só as otimizações que a gente quer em tempo de
compilação? =#if=? Usar defines e =#ifndef= me parece que pode ficar bem chato
bem rapido.

* Otimizações

Okay, pelo o que eu entendi a gente ta pensando nas seguintes otimizações:

** Particionamento da matriz

Ainda não parei pra pensar como isso funcionaria. Juro que vou ler teu lab-book
okay Val.

** Paralelização e SIMD no loop de multiplicação

So far parece a mais simples. Incluir OpenMP e usar as diretivas =parallel for=
e =simd=.

** Alocação contígua da matriz em memória

Not sure como que isso conta como uma otimização. Parece mais um side-effect
desejável das outras otimizações, mas oh well.

Enfim, alocar a matriz continuamente em memória para evitar misses.

* Experimentos

Então, parece ser straightfoward enough mas é que pra fazer acontecer depende
muito de como a gente vai fazer pra compilar diferentes versões do nosso
código.

Quer dizer, sempre da pra fazer um brute force do problema e escrever um
executavel pra cada versão, right? (muito feio tho)

Enfim, quando eu tiver paciência gero o nosso projeto experimental aqui.
